- name: set var NameSpace Auto
  set_fact:
    extra_volterra_namespace: "{{ extra_app.name }}{{ extra_volterra_site_id }}-{{ extra_env }}"
  when: extra_namespace == 'auto'

- name: set var NameSpace Defined
  set_fact:
    extra_volterra_namespace: "{{ extra_namespace }}"
  when: extra_namespace != 'auto'

- name: Create or Update Workload except frontend
  block:

    - name: GET Workload
      uri:
        url: "https://{{ extra_volterra.tenant.short }}.console.ves.volterra.io/api/config/namespaces/{{ extra_volterra_namespace }}/workloads/{{ extra_app.name }}-{{ item.name }}"
        method: GET
        headers:
          Content-Type: application/json
          Authorization: "APIToken {{ extra_volterra.token }}"
        status_code: 200, 404
        validate_certs: no
      loop: "{{ extra_app.components }}"
      register: var_register

    - name: CREATE Workload except frontend
      uri:
        url: "https://{{ extra_volterra.tenant.short }}.console.ves.volterra.io/api/config/namespaces/{{ extra_volterra_namespace }}/workloads"
        method: POST
        headers:
          Content-Type: application/json
          Authorization: "APIToken {{ extra_volterra.token }}"
        body: "{{ lookup('template','workload_sentence_main.json') }}"
        body_format: json
        status_code: 200
        validate_certs: no
      loop: "{{ extra_app.components }}"
      loop_control:
        index_var: cur_index
      when: var_register.results[cur_index].status == 404 and extra_app.components[cur_index].name != "frontend"

    - name: UPDATE Workload except frontend
      uri:
        url: "https://{{ extra_volterra.tenant.short }}.console.ves.volterra.io/api/config/namespaces/{{ extra_volterra_namespace }}/workloads/{{ extra_app.name }}-{{ item.name }}"
        method: PUT
        headers:
          Content-Type: application/json
          Authorization: "APIToken {{ extra_volterra.token }}"
        body: "{{ lookup('template','workload_sentence_main.json') }}"
        body_format: json
        status_code: 200
        validate_certs: no
      loop: "{{ extra_app.components }}"
      loop_control:
        index_var: cur_index
      when: var_register.results[cur_index].status == 200 and extra_app.components[cur_index].name != "frontend"

- name: Create or Update Workload frontend
  block:

    - name: GET Workload
      uri:
        url: "https://{{ extra_volterra.tenant.short }}.console.ves.volterra.io/api/config/namespaces/{{ extra_volterra_namespace }}/workloads/{{ extra_app.name }}-{{ item.name }}"
        method: GET
        headers:
          Content-Type: application/json
          Authorization: "APIToken {{ extra_volterra.token }}"
        status_code: 200, 404
        validate_certs: no
      register: var_register
      loop: "{{ extra_app.components }}"

    - name: CREATE Workload frontend
      uri:
        url: "https://{{ extra_volterra.tenant.short }}.console.ves.volterra.io/api/config/namespaces/{{ extra_volterra_namespace }}/workloads"
        method: POST
        headers:
          Content-Type: application/json
          Authorization: "APIToken {{ extra_volterra.token }}"
        body: "{{ lookup('template','workload_sentence_frontend.json') }}"
        body_format: json
        status_code: 200
        validate_certs: no
      loop: "{{ extra_app.components }}"
      loop_control:
        index_var: cur_index
      when: var_register.results[cur_index].status == 404 and extra_app.components[cur_index].name == "frontend"

    - name: UPDATE Workload frontend
      uri:
        url: "https://{{ extra_volterra.tenant.short }}.console.ves.volterra.io/api/config/namespaces/{{ extra_volterra_namespace }}/workloads/{{ extra_app.name }}-{{ item.name }}"
        method: PUT
        headers:
          Content-Type: application/json
          Authorization: "APIToken {{ extra_volterra.token }}"
        body: "{{ lookup('template','workload_sentence_frontend.json') }}"
        body_format: json
        status_code: 200
        validate_certs: no
      loop: "{{ extra_app.components }}"
      loop_control:
        index_var: cur_index
      when: var_register.results[cur_index].status == 200 and extra_app.components[cur_index].name == "frontend"


